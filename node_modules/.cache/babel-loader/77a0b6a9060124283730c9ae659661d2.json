{"ast":null,"code":"import { _getQuestions } from '../_DATA.js';\nimport { _saveQuestionAnswer } from '../_DATA.js'; //get all questions\n\nexport const RECEIVE_QUESTIONS = 'RECEIVE_QUESTIONS';\nexport const UPDATEQUESTIONSTATE = 'UPDATEQUESTIONSTATE';\nexport const VOTES = 'VOTES';\nexport const UPDATEUSER = 'UPDATEUSER';\nexport const receiveQuestions = questions => {\n  // console.log(\"recever user action\", questions);\n  return {\n    type: RECEIVE_QUESTIONS,\n    questions\n  };\n};\nexport const getQuestionsAction = () => async dispatch => {\n  //   console.log(\"welcome to getquestions action \");\n  const response = await _getQuestions(); //   console.log(\"questions in getquestions action\", response);\n\n  dispatch(receiveQuestions(response));\n};\nexport const receiveVotesAction = (answer, qid, authedUser) => {\n  console.log(\"inputs to receiveVotesAction\", authedUser, qid, answer);\n  return {\n    type: VOTES,\n    answer,\n    qid,\n    authedUser\n  };\n};\nexport const updateAnswerdQuestionsAction = (qid, userVote, authedUser) => {\n  return {\n    type: UPDATEQUESTIONSTATE,\n    qid,\n    userVote,\n    authedUser\n  };\n};\nexport const updateUserAction = (qid, userVote, authedUser) => {\n  return {\n    type: UPDATEUSER,\n    qid,\n    userVote,\n    authedUser\n  };\n};\nexport const saveuserAnswerAction = (authedUser, qid, ans) => async dispatch => {\n  console.log(\"inside the saveuserAnswerAction\");\n  dispatch(receiveVotesAction(authedUser, qid, ans)); // let answer = { [qid]: ans }\n\n  const res = await _saveQuestionAnswer({\n    authedUser,\n    qid,\n    answer: ans\n  });\n  dispatch(updateAnswerdQuestionsAction(qid, ans, authedUser));\n  dispatch(updateUserAction(qid, ans, authedUser));\n};","map":{"version":3,"sources":["C:/Users/menna/OneDrive/Documents/reactnd-project-would-you-rather-starter-master/reactnd-project-would-you-rather-starter-master/would-you-rather/src/actions/home.js"],"names":["_getQuestions","_saveQuestionAnswer","RECEIVE_QUESTIONS","UPDATEQUESTIONSTATE","VOTES","UPDATEUSER","receiveQuestions","questions","type","getQuestionsAction","dispatch","response","receiveVotesAction","answer","qid","authedUser","console","log","updateAnswerdQuestionsAction","userVote","updateUserAction","saveuserAnswerAction","ans","res"],"mappings":"AAAA,SAASA,aAAT,QAA8B,aAA9B;AACA,SAASC,mBAAT,QAAoC,aAApC,C,CACA;;AACA,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,KAAK,GAAG,OAAd;AACP,OAAO,MAAMC,UAAU,GAAG,YAAnB;AAEP,OAAO,MAAMC,gBAAgB,GAAIC,SAAD,IAAe;AAC3C;AACA,SAAO;AACHC,IAAAA,IAAI,EAAEN,iBADH;AAEHK,IAAAA;AAFG,GAAP;AAIH,CANM;AAQP,OAAO,MAAME,kBAAkB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACxD;AACA,QAAMC,QAAQ,GAAG,MAAMX,aAAa,EAApC,CAFwD,CAGxD;;AAEAU,EAAAA,QAAQ,CAACJ,gBAAgB,CAACK,QAAD,CAAjB,CAAR;AAEH,CAPM;AASP,OAAO,MAAMC,kBAAkB,GAAG,CAACC,MAAD,EAASC,GAAT,EAAcC,UAAd,KAA6B;AAC3DC,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,UAA5C,EAAwDD,GAAxD,EAA6DD,MAA7D;AACA,SAAO;AACHL,IAAAA,IAAI,EAAEJ,KADH;AAEHS,IAAAA,MAFG;AAGHC,IAAAA,GAHG;AAIHC,IAAAA;AAJG,GAAP;AAOH,CATM;AAUP,OAAO,MAAMG,4BAA4B,GAAG,CAACJ,GAAD,EAAMK,QAAN,EAAgBJ,UAAhB,KAA+B;AACvE,SAAO;AACHP,IAAAA,IAAI,EAAEL,mBADH;AAEHW,IAAAA,GAFG;AAGHK,IAAAA,QAHG;AAIHJ,IAAAA;AAJG,GAAP;AAMH,CAPM;AAQP,OAAO,MAAMK,gBAAgB,GAAG,CAACN,GAAD,EAAMK,QAAN,EAAgBJ,UAAhB,KAA+B;AAC3D,SAAO;AACHP,IAAAA,IAAI,EAAEH,UADH;AAEHS,IAAAA,GAFG;AAGHK,IAAAA,QAHG;AAIHJ,IAAAA;AAJG,GAAP;AAMH,CAPM;AAUP,OAAO,MAAMM,oBAAoB,GAAG,CAACN,UAAD,EAAaD,GAAb,EAAkBQ,GAAlB,KAA0B,MAAOZ,QAAP,IAAoB;AAC9EM,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACAP,EAAAA,QAAQ,CAACE,kBAAkB,CAACG,UAAD,EAAaD,GAAb,EAAkBQ,GAAlB,CAAnB,CAAR,CAF8E,CAG9E;;AACA,QAAMC,GAAG,GAAG,MAAMtB,mBAAmB,CAAC;AAClCc,IAAAA,UADkC;AAElCD,IAAAA,GAFkC;AAGlCD,IAAAA,MAAM,EAAES;AAH0B,GAAD,CAArC;AAKAZ,EAAAA,QAAQ,CAACQ,4BAA4B,CAACJ,GAAD,EAAMQ,GAAN,EAAWP,UAAX,CAA7B,CAAR;AACAL,EAAAA,QAAQ,CAACU,gBAAgB,CAACN,GAAD,EAAMQ,GAAN,EAAWP,UAAX,CAAjB,CAAR;AAGH,CAbM","sourcesContent":["import { _getQuestions } from '../_DATA.js'\r\nimport { _saveQuestionAnswer } from '../_DATA.js'\r\n//get all questions\r\nexport const RECEIVE_QUESTIONS = 'RECEIVE_QUESTIONS'\r\nexport const UPDATEQUESTIONSTATE = 'UPDATEQUESTIONSTATE'\r\nexport const VOTES = 'VOTES'\r\nexport const UPDATEUSER = 'UPDATEUSER'\r\n\r\nexport const receiveQuestions = (questions) => {\r\n    // console.log(\"recever user action\", questions);\r\n    return {\r\n        type: RECEIVE_QUESTIONS,\r\n        questions\r\n    }\r\n}\r\n\r\nexport const getQuestionsAction = () => async (dispatch) => {\r\n    //   console.log(\"welcome to getquestions action \");\r\n    const response = await _getQuestions();\r\n    //   console.log(\"questions in getquestions action\", response);\r\n\r\n    dispatch(receiveQuestions(response))\r\n\r\n}\r\n\r\nexport const receiveVotesAction = (answer, qid, authedUser) => {\r\n    console.log(\"inputs to receiveVotesAction\", authedUser, qid, answer);\r\n    return {\r\n        type: VOTES,\r\n        answer,\r\n        qid,\r\n        authedUser,\r\n    }\r\n\r\n}\r\nexport const updateAnswerdQuestionsAction = (qid, userVote, authedUser) => {\r\n    return {\r\n        type: UPDATEQUESTIONSTATE,\r\n        qid,\r\n        userVote,\r\n        authedUser,\r\n    }\r\n}\r\nexport const updateUserAction = (qid, userVote, authedUser) => {\r\n    return {\r\n        type: UPDATEUSER,\r\n        qid,\r\n        userVote,\r\n        authedUser,\r\n    }\r\n}\r\n\r\n\r\nexport const saveuserAnswerAction = (authedUser, qid, ans) => async (dispatch) => {\r\n    console.log(\"inside the saveuserAnswerAction\");\r\n    dispatch(receiveVotesAction(authedUser, qid, ans))\r\n    // let answer = { [qid]: ans }\r\n    const res = await _saveQuestionAnswer({\r\n        authedUser,\r\n        qid,\r\n        answer: ans,\r\n    })\r\n    dispatch(updateAnswerdQuestionsAction(qid, ans, authedUser))\r\n    dispatch(updateUserAction(qid, ans, authedUser))\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}